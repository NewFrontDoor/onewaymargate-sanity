import React from 'react';
import S from '@sanity/desk-tool/structure-builder';
import {FaCogs} from 'react-icons/fa';
import {
  MdMap,
  MdReceipt,
  MdHome,
  MdVideoLibrary,
  MdViewAgenda,
  MdFormatListBulleted,
  MdCollectionsBookmark,
  MdInsertDriveFile,
  MdCallToAction,
  MdFormatAlignLeft
} from 'react-icons/md';
import s3upload from './plugins/s3-upload-widget';

const hiddenDocTypes = listItem =>
  ![
    'config',
    'main',
    'LayoutHome',
    'speaker',
    'category',
    'page',
    'modals',
    'form'
  ].includes(listItem.getId());

export default () => {
  return S.list()
    .title('Website Content and Settings')
    .items([
      S.listItem()
        .title('Home and Menu')
        .icon(MdHome)
        .child(
          S.editor()
            .title('Home and Menu')
            .id('global-main')
            .schemaType('main')
            .documentId('global-main')
        ),
      S.listItem()
        .title('Segments')
        .icon(MdViewAgenda)
        .child(
          S.list()
            .title('Segments')
            .items([
              S.listItem()
                .title('Normal segments')
                .icon(MdReceipt)
                .child(
                  S.documentList()
                    .title('Segments')
                    .menuItems(S.documentTypeList('LayoutHome').getMenuItems())
                    .filter('_type in ["LayoutHome"]')
                ),
              S.listItem()
                .title('Map segments')
                .icon(MdMap)
                .child(
                  S.documentList()
                    .title('Segments')
                    .menuItems(S.documentTypeList('LayoutMap').getMenuItems())
                    .filter('_type in ["LayoutMap"]')
                )
            ])
        ),
      S.listItem()
        .title('Pages')
        .icon(MdInsertDriveFile)
        .child(
          S.documentList()
            .title('Pages')
            .menuItems(S.documentTypeList('page').getMenuItems())
            .filter('_type in ["page"]')
        ),
      S.listItem()
        .title('Body content blocks')
        .icon(MdCollectionsBookmark)
        .child(
          S.list()
            .title('Body content blocks')
            .items([
              S.listItem()
                .title('Forms')
                .child(
                  S.documentList()
                    .title('Forms')
                    .menuItems(S.documentTypeList('form').getMenuItems())
                    .filter('_type in ["form"]')
                ),
              S.listItem()
                .title('Grid block')
                .child(
                  S.documentList()
                    .title('Grid block')
                    .menuItems(S.documentTypeList('gridblock').getMenuItems())
                    .filter('_type in ["gridblock"]')
                )
            ])
        ),
      S.listItem()
        .title('Categories and classes')
        .icon(MdCollectionsBookmark)
        .child(
          S.list()
            .title('Categories and classes')
            .items([
              S.listItem()
                .title('Speakers')
                .child(
                  S.documentList()
                    .title('Speakers')
                    .menuItems(S.documentTypeList('speaker').getMenuItems())
                    .filter('_type in ["speaker"]')
                ),
              S.listItem()
                .title('Series')
                .child(
                  S.documentList()
                    .title('Series')
                    .menuItems(
                      S.documentTypeList('series')
                        .defaultOrdering([
                          {field: '_updatedAt', direction: 'desc'}
                        ])
                        .getMenuItems()
                    )
                    .filter('_type in ["series"]')
                )
            ])
        ),
      S.listItem()
        .title('Sermons')
        .icon(MdVideoLibrary)
        .child(
          S.documentList()
            .title('Sermons')
            .menuItems(S.documentTypeList('sermons').getMenuItems())
            .filter('_type in ["sermons"]')
        ),
      S.divider(),
      S.listItem()
        .title('Config')
        .icon(FaCogs)
        .child(
          S.editor()
            .id('config')
            .title('Config')
            .schemaType('config')
            .documentId('global-config')
        )
    ]);
};
